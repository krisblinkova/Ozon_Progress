{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;AACAA,QAAQ,CAACC,gBAAgB,CAAC,kBAAkB,EAAE,YAAM;EAGlD,IAAMC,MAAM,GAAGF,QAAQ,CAACG,aAAa,CAAC,wBAAwB,CAAC;EAC/D,IAAMC,KAAK,GAAGJ,QAAQ,CAACK,cAAc,CAAC,YAAY,CAAC;EACnD,IAAMC,gBAAgB,GAAGN,QAAQ,CAACK,cAAc,CAAC,QAAQ,CAAC;EAC1D,IAAME,eAAe,GAAGP,QAAQ,CAACK,cAAc,CAAC,SAAS,CAAC;EAC1D,IAAMG,cAAc,GAAGR,QAAQ,CAACG,aAAa,CAAC,UAAU,CAAC;EACzD,IAAMM,YAAY,GAAGT,QAAQ,CAACG,aAAa,CAAC,gBAAgB,CAAC;EAG7D,IAAI,CAACD,MAAM,IAAI,CAACE,KAAK,IAAI,CAACE,gBAAgB,IAAI,CAACC,eAAe,IAAI,CAACC,cAAc,IAAI,CAACC,YAAY,EAAE;IAChGC,OAAO,CAACC,KAAK,CAAC,mBAAmB,CAAC;IAClC;EACJ;EAAC,IAEGC,QAAQ;IACV,SAAAA,SAAYV,MAAM,EAAEE,KAAK,EAAEE,gBAAgB,EAAEC,eAAe,EAAEC,cAAc,EAAEC,YAAY,EAAE;MAAAI,eAAA,OAAAD,QAAA;MACxF,IAAI,CAACV,MAAM,GAAGA,MAAM;MACpB,IAAI,CAACE,KAAK,GAAGA,KAAK;MAClB,IAAI,CAACE,gBAAgB,GAAGA,gBAAgB;MACxC,IAAI,CAACC,eAAe,GAAGA,eAAe;MACtC,IAAI,CAACC,cAAc,GAAGA,cAAc;MACpC,IAAI,CAACC,YAAY,GAAGA,YAAY;;MAIhC;MACA,IAAI,CAACK,MAAM,GAAG,IAAI,CAACZ,MAAM,CAACa,CAAC,CAACC,OAAO,CAACC,KAAK;MACzC;MACA,IAAI,CAACC,aAAa,GAAG,CAAC,GAAGC,IAAI,CAACC,EAAE,GAAG,IAAI,CAACN,MAAM;MAC9C;MACA,IAAI,CAACZ,MAAM,CAACmB,KAAK,CAACC,eAAe,MAAAC,MAAA,CAAM,IAAI,CAACL,aAAa,OAAAK,MAAA,CAAI,IAAI,CAACL,aAAa,CAAE;MACjF;MACA,IAAI,CAAChB,MAAM,CAACmB,KAAK,CAACG,gBAAgB,GAAG,IAAI,CAACN,aAAa;;MAEvD;MACA,IAAI,CAACO,iBAAiB,GAAG,IAAI;MAC7B,IAAI,CAACC,eAAe,GAAG,CAAC;MAExB,IAAI,CAACC,IAAI,CAAC,CAAC;IACb;IAAC,OAAAC,YAAA,CAAAhB,QAAA;MAAAiB,GAAA;MAAAZ,KAAA,EAED,SAAAU,IAAIA,CAAA,EAAG;QAAA,IAAAG,KAAA;QACL;QACA,IAAI,CAACC,YAAY,CAAC,CAAC;;QAEnB;QACA,IAAI,CAAC3B,KAAK,CAACH,gBAAgB,CAAC,OAAO,EAAE,YAAM;UACzC6B,KAAI,CAACE,WAAW,CAACF,KAAI,CAAC1B,KAAK,CAACa,KAAK,CAAC;UAClCa,KAAI,CAACG,YAAY,CAAC,CAAC;UACnBH,KAAI,CAACI,oBAAoB,CAACJ,KAAI,CAAC1B,KAAK,CAACa,KAAK,CAAC;QAC7C,CAAC,CAAC;QAEF,IAAI,CAACX,gBAAgB,CAACL,gBAAgB,CAAC,QAAQ,EAAE;UAAA,OAAM6B,KAAI,CAACK,gBAAgB,CAAC,CAAC;QAAA,EAAC;QAC/E,IAAI,CAAC5B,eAAe,CAACN,gBAAgB,CAAC,QAAQ,EAAE;UAAA,OAAM6B,KAAI,CAACM,eAAe,CAAC,CAAC;QAAA,EAAC;MAC/E;IAAC;MAAAP,GAAA;MAAAZ,KAAA,EAED,SAAAe,WAAWA,CAACK,OAAO,EAAE;QACnB,IAAMpB,KAAK,GAAGqB,MAAM,CAACD,OAAO,CAAC;QAC7B,IAAME,MAAM,GAAG,IAAI,CAACrB,aAAa,GAAID,KAAK,GAAG,GAAG,GAAG,IAAI,CAACC,aAAc;QACtE,IAAI,CAAChB,MAAM,CAACmB,KAAK,CAACG,gBAAgB,GAAGe,MAAM;MAC7C;IAAC;MAAAV,GAAA;MAAAZ,KAAA,EAED,SAAAiB,oBAAoBA,CAACG,OAAO,EAAE;QAC5B,IAAI,CAAC7B,cAAc,CAACgC,WAAW,GAAGH,OAAO,GAAG,GAAG;MACjD;IAAC;MAAAR,GAAA;MAAAZ,KAAA,EAED,SAAAgB,YAAYA,CAAA,EAAG;QACbQ,YAAY,CAACC,OAAO,CAAC,UAAU,EAAE,IAAI,CAACtC,KAAK,CAACa,KAAK,CAAC;MACpD;IAAC;MAAAY,GAAA;MAAAZ,KAAA,EAED,SAAAc,YAAYA,CAAA,EAAG;QACb,IAAMY,QAAQ,GAAGF,YAAY,CAACG,OAAO,CAAC,UAAU,CAAC;QACjD,IAAID,QAAQ,KAAK,IAAI,EAAE;UACrB,IAAI,CAACvC,KAAK,CAACa,KAAK,GAAG0B,QAAQ;UAC3B,IAAI,CAACX,WAAW,CAACW,QAAQ,CAAC;UAC1B,IAAI,CAACT,oBAAoB,CAACS,QAAQ,CAAC;QACrC;MACF;IAAC;MAAAd,GAAA;MAAAZ,KAAA,EAED,SAAAkB,gBAAgBA,CAAA,EAAG;QACjB,IAAI,IAAI,CAAC7B,gBAAgB,CAACuC,OAAO,EAAE;UACjC,IAAI,CAACpC,YAAY,CAACY,KAAK,CAACyB,OAAO,GAAG,GAAG;QACvC,CAAC,MAAM;UACL,IAAI,CAACrC,YAAY,CAACY,KAAK,CAACyB,OAAO,GAAG,GAAG;UACrC;UACA,IAAI,CAACf,YAAY,CAAC,CAAC;QACrB;MACF;IAAC;MAAAF,GAAA;MAAAZ,KAAA,EAED,SAAA8B,eAAeA,CAAA,EAAG;QAAA,IAAAC,MAAA;QAChB;QACF,IAAI,IAAI,CAACvB,iBAAiB,EAAE;UAC1BwB,aAAa,CAAC,IAAI,CAACxB,iBAAiB,CAAC;QACvC;QACA;QACA,IAAI,CAACC,eAAe,GAAG,CAAC;QACxB,IAAI,CAACD,iBAAiB,GAAGyB,WAAW,CAAC,YAAM;UACzCF,MAAI,CAACtB,eAAe,GAAG,CAACsB,MAAI,CAACtB,eAAe,GAAG,CAAC,IAAI,GAAG;UACvD;UACAsB,MAAI,CAAC9C,MAAM,CAACmB,KAAK,CAAC8B,SAAS,4BAAA5B,MAAA,CAA4ByB,MAAI,CAACtB,eAAe,SAAM;QACnF,CAAC,EAAE,EAAE,CAAC;MACR;IAAC;MAAAG,GAAA;MAAAZ,KAAA,EAEC,SAAAmB,eAAeA,CAAA,EAAG;QAChB,IAAI,IAAI,CAAC7B,eAAe,CAACsC,OAAO,EAAE;UAChC,IAAI,CAACE,eAAe,CAAC,CAAC;QACxB,CAAC,MAAM;UACL,IAAI,IAAI,CAACtB,iBAAiB,EAAE;YAC1BwB,aAAa,CAAC,IAAI,CAACxB,iBAAiB,CAAC;YACrC,IAAI,CAACA,iBAAiB,GAAG,IAAI;YAC7B;YACF,IAAI,CAACvB,MAAM,CAACmB,KAAK,CAAC8B,SAAS,GAAG,gBAAgB;UAC9C;QACF;MACF;IAAC;EAAA,KAEH;EACA,IAAMC,iBAAiB,GAAG,IAAIxC,QAAQ,CAACV,MAAM,EAAEE,KAAK,EAAEE,gBAAgB,EAAEC,eAAe,EAAEC,cAAc,EAAEC,YAAY,CAAC;AAExH,CAAC,CAAC,C","sources":["webpack:///./project-root/components/progress.js"],"sourcesContent":["\ndocument.addEventListener('DOMContentLoaded', () => {\n\n\n  const circle = document.querySelector('.progress-ring__circle');\n  const input = document.getElementById('rangeInput');\n  const visibilitySwitch = document.getElementById('switch');\n  const animationSwitch = document.getElementById('animate');\n  const percentDisplay = document.querySelector('.percent');\n  const progressRing = document.querySelector('.progress-ring');\n  \n  \n  if (!circle || !input || !visibilitySwitch || !animationSwitch || !percentDisplay || !progressRing) {\n      console.error('Элемент не найден');\n      return;\n  }\n\nclass Progress {\n    constructor(circle, input, visibilitySwitch, animationSwitch, percentDisplay, progressRing) {\n        this.circle = circle;\n        this.input = input;\n        this.visibilitySwitch = visibilitySwitch;\n        this.animationSwitch = animationSwitch;\n        this.percentDisplay = percentDisplay;\n        this.progressRing = progressRing;\n        \n\n\n        // Получаем радиус круга\n        this.radius = this.circle.r.baseVal.value;\n        // Вычисляем длину окружности\n        this.circumference = 2 * Math.PI * this.radius;\n        // Устанавливаем длину окружности в strokeDasharray\n        this.circle.style.strokeDasharray = `${this.circumference} ${this.circumference}`;\n        // Устанавливаем смещение окружности\n        this.circle.style.strokeDashoffset = this.circumference;\n\n        // Идентификатор для анимационного интервала\n        this.animationInterval = null;\n        this.currentRotation = 0;\n\n        this.init();\n      }\n\n      init() {\n        // Загрузка сохранённого прогресса\n        this.loadProgress();\n\n        // Привязываем обработчики событий\n        this.input.addEventListener('input', () => {\n          this.setProgress(this.input.value);\n          this.saveProgress();\n          this.updatePercentDisplay(this.input.value);\n        });\n\n        this.visibilitySwitch.addEventListener('change', () => this.toggleVisibility());\n        this.animationSwitch.addEventListener('change', () => this.toggleAnimation());\n      }\n\n      setProgress(percent) {\n        const value = Number(percent);\n        const offset = this.circumference - (value / 100 * this.circumference);\n        this.circle.style.strokeDashoffset = offset;\n      }\n\n      updatePercentDisplay(percent) {\n        this.percentDisplay.textContent = percent + '%';\n      }\n\n      saveProgress() {\n        localStorage.setItem('progress', this.input.value);\n      }\n\n      loadProgress() {\n        const progress = localStorage.getItem('progress');\n        if (progress !== null) {\n          this.input.value = progress;\n          this.setProgress(progress);\n          this.updatePercentDisplay(progress);\n        }\n      }\n\n      toggleVisibility() {\n        if (this.visibilitySwitch.checked) {\n          this.progressRing.style.opacity = \"0\";\n        } else {\n          this.progressRing.style.opacity = \"1\";\n          //Загружаем сохранённое значение\n          this.loadProgress();\n        }\n      }\n\n      animateProgress() {\n        // Останавливаем предыдущую анимацию, если она запущена\n      if (this.animationInterval) {\n        clearInterval(this.animationInterval);\n      }\n      // Сбрасываем текущий поворот\n      this.currentRotation = 0;\n      this.animationInterval = setInterval(() => {\n        this.currentRotation = (this.currentRotation + 2) % 360;\n        // Комбинируем базовый сдвиг -90° (чтобы начинать с 12 часов) и текущий поворот\n        this.circle.style.transform = `rotate(-90deg) rotate(${this.currentRotation}deg)`;\n      }, 10);\n    }\n\n      toggleAnimation() {\n        if (this.animationSwitch.checked) {\n          this.animateProgress();\n        } else {\n          if (this.animationInterval) {\n            clearInterval(this.animationInterval);\n            this.animationInterval = null;\n            // В режиме Normal возвращаем базовый поворот (-90°)\n          this.circle.style.transform = 'rotate(-90deg)';\n          }\n        }\n      }\n    }\n    // Инициализация компонента Progress\n    const progressComponent = new Progress(circle, input, visibilitySwitch, animationSwitch, percentDisplay, progressRing);\n\n  });\n\n\n    "],"names":["document","addEventListener","circle","querySelector","input","getElementById","visibilitySwitch","animationSwitch","percentDisplay","progressRing","console","error","Progress","_classCallCheck","radius","r","baseVal","value","circumference","Math","PI","style","strokeDasharray","concat","strokeDashoffset","animationInterval","currentRotation","init","_createClass","key","_this","loadProgress","setProgress","saveProgress","updatePercentDisplay","toggleVisibility","toggleAnimation","percent","Number","offset","textContent","localStorage","setItem","progress","getItem","checked","opacity","animateProgress","_this2","clearInterval","setInterval","transform","progressComponent"],"sourceRoot":""}